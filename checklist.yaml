openapi: 3.0.0
info:
  title: 'JIRA Checklist API'
  version: '0.1'
servers:
  -
    url: 'https://sandbox.exads.rocks'
paths:
  /api/items:
    get:
      tags:
        - Item
      summary: 'Get a list of all items'
      operationId: listItems
      parameters:
        -
          name: user_id
          in: query
          description: 'Set the user id to filter the items (admin only).'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'List all items.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Item
      summary: 'Create a new item'
      operationId: createItem
      requestBody:
        description: 'Item object'
        required: true
        content:
          application/json:
            schema:
              required:
                - summary
                - section_id
              properties:
                summary:
                  type: string
                  format: text
                  example: 'This is an item summary'
                section_id:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '201':
          description: 'Creation successful'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/items/{id}':
    get:
      tags:
        - Item
      summary: 'Get a item by id'
      operationId: getItemById
      parameters:
        -
          name: id
          in: path
          description: 'Item id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Get a single item.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: 'Item not found.'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Item
      summary: 'Update a specific item'
      operationId: updateItem
      parameters:
        -
          name: id
          in: path
          description: 'Item id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Item object'
        required: true
        content:
          application/json:
            schema:
              required:
                - summary
                - is_checked
                - is_important
                - order
                - status_id
              properties:
                summary:
                  type: string
                  format: text
                  example: 'This is an item summary'
                is_checked:
                  type: boolean
                  example: false
                is_important:
                  type: boolean
                  example: true
                position:
                  type: integer
                  format: int64
                  example: 6
                status_id:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '200':
          description: 'Item updated'
        '404':
          description: 'Item not found'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Item
      summary: 'Deletes a item'
      operationId: deleteItem
      parameters:
        -
          name: id
          in: path
          description: 'Item id to delete'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Item deleted'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Item not found'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/items/section/{id}':
    patch:
      tags:
        - Item
      summary: 'Update the section of a specific item'
      operationId: updateItemSection
      parameters:
        -
          name: id
          in: path
          description: 'Item id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Section id'
        required: true
        content:
          application/json:
            schema:
              required:
                - section_id
              properties:
                section_id:
                  type: integer
                  format: int64
                  example: '1'
              type: object
      responses:
        '200':
          description: 'Item section updated'
        '404':
          description: 'Item not found'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/item-statuses/{id}':
    get:
      tags:
        - 'Item Status'
      summary: 'Get a item status by id'
      operationId: getItemStatusById
      parameters:
        -
          name: id
          in: path
          description: 'Item status id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Get a single item status.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemStatus'
        '404':
          description: 'Item status not found.'
  /api/item-statuses:
    get:
      tags:
        - 'Item Status'
      summary: 'Get a list of all item statuses available'
      operationId: listItemStatuses
      responses:
        '200':
          description: 'List all item statuses.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemStatus'
  /api/sections:
    get:
      tags:
        - Section
      summary: 'Get a list of all sections'
      operationId: listSections
      parameters:
        -
          name: user_id
          in: query
          description: 'Set the user id to filter the sections (admin only).'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'List all sections.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Section
      summary: 'Create a new section'
      operationId: createSection
      requestBody:
        description: 'Section object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - tab_id
              properties:
                name:
                  type: string
                  format: text
                  example: 'Section 1'
                tab_id:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '201':
          description: 'Creation successful'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/sections/{id}':
    get:
      tags:
        - Section
      summary: 'Get a section by id'
      operationId: getSectionById
      parameters:
        -
          name: id
          in: path
          description: 'Section id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        -
          name: full
          in: query
          description: 'Set full to true to get the full section information.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Get a single section.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        '404':
          description: 'Section not found.'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Section
      summary: 'Update a specific section'
      operationId: updateSection
      parameters:
        -
          name: id
          in: path
          description: 'Section id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Section object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - order
              properties:
                name:
                  type: string
                  format: text
                  example: 'Section 1'
                position:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '200':
          description: 'Section updated'
        '404':
          description: 'Section not found'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Section
      summary: 'Deletes a section'
      operationId: deleteSection
      parameters:
        -
          name: id
          in: path
          description: 'Section id to delete'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Section deleted'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Section not found'
        '401':
          description: 'Unauthorized / Token missing or invalid'
        '409':
          description: 'Could not delete section because of database conflict'
      security:
        -
          bearerAuth: []
  '/api/sections/tab/{id}':
    patch:
      tags:
        - Section
      summary: 'Update the tab of a specific section'
      operationId: updateSectionTab
      parameters:
        -
          name: id
          in: path
          description: 'Section id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Tab id'
        required: true
        content:
          application/json:
            schema:
              required:
                - tab_id
              properties:
                tab_id:
                  type: integer
                  format: int64
                  example: '1'
              type: object
      responses:
        '200':
          description: 'Section tab updated'
        '404':
          description: 'Section not found'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  /api/tabs:
    get:
      tags:
        - Tab
      summary: 'Get a list of all tabs'
      operationId: listTabs
      parameters:
        -
          name: user_id
          in: query
          description: 'Set the user id to filter the tabs (admin only).'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'List all tabs.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tab'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Tab
      summary: 'Create a new tab'
      operationId: createTab
      requestBody:
        description: 'Tab object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - ticket_id
              properties:
                name:
                  type: string
                  format: text
                  example: 'Tab 1'
                ticket_id:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '201':
          description: 'Creation successful'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/tabs/{id}':
    get:
      tags:
        - Tab
      summary: 'Get a tab by id'
      operationId: getTabById
      parameters:
        -
          name: id
          in: path
          description: 'Tab id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        -
          name: full
          in: query
          description: 'Set full to true to get the full tab information.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Get a single tab.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tab'
        '404':
          description: 'Tab not found.'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Tab
      summary: 'Update a specific tab'
      operationId: updateTab
      parameters:
        -
          name: id
          in: path
          description: 'Tab id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Tab object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - order
              properties:
                name:
                  type: string
                  format: text
                  example: 'Tab 1'
                position:
                  type: integer
                  format: int64
                  example: 1
              type: object
      responses:
        '200':
          description: 'Tab updated'
        '404':
          description: 'Tab not found'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Tab
      summary: 'Deletes a tab'
      operationId: deleteTab
      parameters:
        -
          name: id
          in: path
          description: 'Tab id to delete'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Tab deleted'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Tab not found'
        '401':
          description: 'Unauthorized / Token missing or invalid'
        '409':
          description: 'Could not delete tab because of database conflict'
      security:
        -
          bearerAuth: []
  '/api/tabs/ticket/{id}':
    patch:
      tags:
        - Tab
      summary: 'Update the ticket of a specific tab'
      operationId: updateTabTicket
      parameters:
        -
          name: id
          in: path
          description: 'Tab id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Ticket id'
        required: true
        content:
          application/json:
            schema:
              required:
                - ticket_id
              properties:
                ticket_id:
                  type: integer
                  format: int64
                  example: '1'
              type: object
      responses:
        '200':
          description: 'Tab ticket updated'
        '404':
          description: 'Tab not found'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  /api/tickets:
    get:
      tags:
        - Ticket
      summary: 'Get a list of all tickets'
      operationId: listTickets
      parameters:
        -
          name: user_id
          in: query
          description: 'Set the user id to filter the tickets (admin only).'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'List all tickets.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Ticket
      summary: 'Create a new ticket'
      operationId: createTicket
      requestBody:
        description: 'Ticket object'
        required: true
        content:
          application/json:
            schema:
              required:
                - title
              properties:
                title:
                  type: string
                  format: text
                  example: 'Ticket 1'
                description:
                  type: string
                  format: text
                  example: 'This ticket is about this...'
              type: object
      responses:
        '201':
          description: 'Creation successful'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/tickets/{id}':
    get:
      tags:
        - Ticket
      summary: 'Get a ticket by id'
      operationId: getTicketById
      parameters:
        -
          name: id
          in: path
          description: 'Ticket id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        -
          name: full
          in: query
          description: 'Set full to true to get the full ticket information.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Get a single ticket.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: 'Ticket not found.'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Ticket
      summary: 'Update a specific ticket'
      operationId: updateTicket
      parameters:
        -
          name: id
          in: path
          description: 'Ticket id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'Ticket object'
        required: true
        content:
          application/json:
            schema:
              required:
                - title
                - description
              properties:
                title:
                  type: string
                  format: text
                  example: 'Ticket About Things'
                description:
                  type: string
                  format: text
                  example: 'This ticket is about...'
              type: object
      responses:
        '200':
          description: 'Ticket updated'
        '404':
          description: 'Ticket not found'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Ticket
      summary: 'Deletes a ticket'
      operationId: deleteTicket
      parameters:
        -
          name: id
          in: path
          description: 'Ticket id to delete'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Ticket deleted'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Ticket not found'
        '401':
          description: 'Unauthorized / Token missing or invalid'
        '409':
          description: 'Could not delete ticket because of database conflict'
      security:
        -
          bearerAuth: []
  /api/users/register:
    post:
      tags:
        - User
      summary: 'Register a new user'
      operationId: createUser
      requestBody:
        description: 'User object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  format: text
                  example: Pedro
                email:
                  type: email
                  format: text
                  example: pedro666@example.org
                password:
                  type: string
                  format: text
                  example: 'Password123456?'
              type: object
      responses:
        '201':
          description: 'Creation successful'
        '400':
          description: 'Bad Request / Validation Error'
  '/api/users/{id}':
    get:
      tags:
        - User
      summary: 'Get a user by id'
      operationId: getUserById
      parameters:
        -
          name: id
          in: path
          description: 'User id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'Get a single user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found.'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    put:
      tags:
        - User
      summary: 'Update a specific user'
      operationId: updateUser
      parameters:
        -
          name: id
          in: path
          description: 'User id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'User object'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  format: text
                  example: João
                email:
                  type: string
                  format: text
                  example: joao@gmail.com
              type: object
      responses:
        '200':
          description: 'User updated'
        '404':
          description: 'User not found'
        '400':
          description: 'Bad Request / Validation Error'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - User
      summary: 'Deletes a user'
      operationId: deleteUser
      parameters:
        -
          name: id
          in: path
          description: 'User id to delete'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: 'User deleted'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'User not found'
        '401':
          description: 'Unauthorized / Token missing or invalid'
        '409':
          description: 'Could not delete user because of database conflict'
      security:
        -
          bearerAuth: []
  /api/users:
    get:
      tags:
        - User
      summary: 'Get a list of all users'
      operationId: listUsers
      responses:
        '200':
          description: 'List all users.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  /api/users/login:
    post:
      tags:
        - User
      summary: 'Login with a certain user'
      operationId: loginUser
      requestBody:
        description: 'Login data'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: email
                  format: text
                  example: pedro666@example.org
                password:
                  type: string
                  format: text
                  example: 'Password123456?'
              type: object
      responses:
        '200':
          description: 'Login successful'
        '400':
          description: 'Bad Request / Validation Error / Login Failed'
  '/api/users/password/{id}':
    patch:
      tags:
        - User
      summary: 'Update the password of a specific user'
      operationId: updateUserPassword
      parameters:
        -
          name: id
          in: path
          description: 'User id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: Password
        required: true
        content:
          application/json:
            schema:
              required:
                - password
              properties:
                password:
                  type: string
                  format: text
                  example: 'Password123456?'
              type: object
      responses:
        '200':
          description: 'User password updated'
        '404':
          description: 'User not found'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
  '/api/users/role/{id}':
    patch:
      tags:
        - User
      summary: 'Update the role of a specific user'
      operationId: updateUserRole
      parameters:
        -
          name: id
          in: path
          description: 'User id.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        description: 'User role'
        required: true
        content:
          application/json:
            schema:
              required:
                - role
              properties:
                role:
                  type: string
                  format: text
                  example: admin
              type: object
      responses:
        '200':
          description: 'User role updated'
        '404':
          description: 'User not found'
        '405':
          description: 'Validation exception'
        '401':
          description: 'Unauthorized / Token missing or invalid'
      security:
        -
          bearerAuth: []
components:
  schemas:
    Item:
      properties:
        id:
          description: 'Item id,'
          type: integer
        summary:
          description: 'Item summary,'
          type: string
        is_checked:
          description: 'Check if item is checked,'
          type: boolean
        is_important:
          description: 'Check if item is important,'
          type: boolean
        position:
          description: 'Position of the item in the section,'
          type: integer
        section_id:
          description: 'Item section id,'
          type: integer
        status_id:
          description: 'Item status id,'
          type: integer
      type: object
    ItemStatus:
      properties:
        id:
          description: 'Status id,'
          type: integer
        label:
          description: 'Status label,'
          type: string
        color:
          description: 'Status color,'
          type: string
      type: object
    Section:
      properties:
        id:
          description: 'Section id,'
          type: integer
        name:
          description: 'Section name,'
          type: string
        position:
          description: 'Position of section in the tab,'
          type: integer
        tab_id:
          description: 'Section tab id,'
          type: integer
        items:
          description: 'Section items list,'
          type: array
          items:
            $ref: '#/components/schemas/Item'
      type: object
    Tab:
      properties:
        id:
          description: 'Tab id,'
          type: integer
        name:
          description: 'Tab name,'
          type: string
        position:
          description: 'Position of the tab in the ticket,'
          type: integer
        ticket_id:
          description: 'Tab ticket id,'
          type: integer
        sections:
          description: 'Tab sections list,'
          type: array
          items:
            $ref: '#/components/schemas/Section'
      type: object
    Ticket:
      properties:
        id:
          description: 'Ticket id,'
          type: integer
        title:
          description: 'Ticket title,'
          type: string
        description:
          description: 'Ticket description,'
          type: string
        user_id:
          description: 'User id of the user that created the ticket,'
          type: integer
        tabs:
          description: 'Ticket tabs list,'
          type: array
          items:
            $ref: '#/components/schemas/Tab'
      type: object
    User:
      properties:
        id:
          description: 'User id,'
          type: integer
        name:
          description: 'User name,'
          type: string
        email:
          description: 'User email,'
          type: string
        password:
          description: 'User password,'
          type: string
        role:
          description: 'User role,'
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      name: bearerAuth
      in: header
      bearerFormat: JWT
      scheme: bearer
